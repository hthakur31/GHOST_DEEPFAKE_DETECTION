# Generated by Django 4.2 on 2025-07-27 12:28

import detector.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DetectionResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('video_file', models.FileField(help_text='Upload video file (max 100MB)', upload_to=detector.models.video_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp4', 'avi', 'mov', 'mkv', 'webm'])])),
                ('original_filename', models.CharField(max_length=255)),
                ('file_size', models.BigIntegerField(help_text='File size in bytes')),
                ('prediction', models.CharField(choices=[('REAL', 'Real'), ('FAKE', 'Deepfake'), ('PROCESSING', 'Processing'), ('ERROR', 'Error')], default='PROCESSING', max_length=20)),
                ('confidence_score', models.FloatField(blank=True, help_text='Confidence score (0-1)', null=True)),
                ('fake_probability', models.FloatField(blank=True, help_text='Probability of being fake (0-1)', null=True)),
                ('real_probability', models.FloatField(blank=True, help_text='Probability of being real (0-1)', null=True)),
                ('model_used', models.CharField(blank=True, help_text='Name of the detection model used', max_length=100)),
                ('model_version', models.CharField(blank=True, help_text='Version of the detection model', max_length=50)),
                ('processing_time', models.FloatField(blank=True, help_text='Processing time in seconds', null=True)),
                ('video_duration', models.FloatField(blank=True, help_text='Video duration in seconds', null=True)),
                ('video_fps', models.FloatField(blank=True, help_text='Video frames per second', null=True)),
                ('video_resolution', models.CharField(blank=True, help_text='Video resolution (e.g., 1920x1080)', max_length=20)),
                ('frames_analyzed', models.IntegerField(blank=True, help_text='Number of frames analyzed', null=True)),
                ('face_detected', models.BooleanField(default=False, help_text='Whether a face was detected')),
                ('face_count', models.IntegerField(default=0, help_text='Number of faces detected')),
                ('detection_method', models.CharField(blank=True, help_text='Detection method used', max_length=100)),
                ('error_message', models.TextField(blank=True, help_text='Error message if processing failed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Detection Result',
                'verbose_name_plural': 'Detection Results',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ModelPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(max_length=100)),
                ('model_version', models.CharField(max_length=50)),
                ('total_predictions', models.IntegerField(default=0)),
                ('correct_predictions', models.IntegerField(default=0)),
                ('false_positives', models.IntegerField(default=0)),
                ('false_negatives', models.IntegerField(default=0)),
                ('true_positives', models.IntegerField(default=0)),
                ('true_negatives', models.IntegerField(default=0)),
                ('accuracy', models.FloatField(blank=True, null=True)),
                ('precision', models.FloatField(blank=True, null=True)),
                ('recall', models.FloatField(blank=True, null=True)),
                ('f1_score', models.FloatField(blank=True, null=True)),
                ('avg_processing_time', models.FloatField(blank=True, null=True)),
                ('avg_confidence_score', models.FloatField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Model Performance',
                'verbose_name_plural': 'Model Performance Metrics',
                'unique_together': {('model_name', 'model_version')},
            },
        ),
        migrations.CreateModel(
            name='FrameAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frame_number', models.IntegerField()),
                ('timestamp', models.FloatField(help_text='Timestamp in video (seconds)')),
                ('prediction', models.CharField(choices=[('REAL', 'Real'), ('FAKE', 'Deepfake'), ('PROCESSING', 'Processing'), ('ERROR', 'Error')], max_length=20)),
                ('confidence_score', models.FloatField(help_text='Confidence score for this frame')),
                ('fake_probability', models.FloatField(help_text='Probability of being fake')),
                ('real_probability', models.FloatField(help_text='Probability of being real')),
                ('face_detected', models.BooleanField(default=False)),
                ('face_bbox', models.JSONField(blank=True, help_text='Face bounding box coordinates', null=True)),
                ('face_landmarks', models.JSONField(blank=True, help_text='Face landmark coordinates', null=True)),
                ('temporal_consistency', models.FloatField(blank=True, null=True)),
                ('spatial_consistency', models.FloatField(blank=True, null=True)),
                ('compression_artifacts', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('detection_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='frame_analyses', to='detector.detectionresult')),
            ],
            options={
                'verbose_name': 'Frame Analysis',
                'verbose_name_plural': 'Frame Analyses',
                'ordering': ['frame_number'],
                'unique_together': {('detection_result', 'frame_number')},
            },
        ),
    ]
